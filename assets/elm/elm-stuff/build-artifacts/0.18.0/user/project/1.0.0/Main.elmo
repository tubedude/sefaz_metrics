var _user$project$Main$makeProtoSeries = F2(
	function (factType, fact) {
		var date = _elm_lang$core$Date$toTime(
			A2(
				_elm_lang$core$Result$withDefault,
				_elm_lang$core$Date$fromTime(0),
				_elm_lang$core$Date$fromString(fact.date)));
		var value = function () {
			var _p0 = factType;
			if (_p0.ctor === 'Nfe') {
				return fact.nfeQuant;
			} else {
				return fact.emitterQuant;
			}
		}();
		return {ctor: '_Tuple2', _0: date, _1: value};
	});
var _user$project$Main$convert = F2(
	function (facts, factType) {
		var array = _elm_lang$core$Array$fromList(
			A2(
				_elm_lang$core$List$map,
				_user$project$Main$makeProtoSeries(factType),
				facts));
		return A2(
			_user$project$Chart$ProtoSeries,
			_elm_lang$core$Basics$toString(factType),
			array);
	});
var _user$project$Main$displayError = function (error) {
	var _p1 = error;
	switch (_p1.ctor) {
		case 'BadUrl':
			return _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Bad URL ', _p1._0));
		case 'Timeout':
			return _elm_lang$html$Html$text('Timeout');
		case 'NetworkError':
			return _elm_lang$html$Html$text('NetworkError');
		case 'BadStatus':
			return _elm_lang$html$Html$text('Bad Status: ');
		default:
			return _elm_lang$html$Html$text(
				A2(_elm_lang$core$Basics_ops['++'], 'Bad Payload: ', _p1._0));
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$Fact = F3(
	function (a, b, c) {
		return {date: a, nfeQuant: b, emitterQuant: c};
	});
var _user$project$Main$factDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'emitter_quant',
	_elm_lang$core$Json_Decode$float,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'nfe_quant',
		_elm_lang$core$Json_Decode$float,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'date',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Fact))));
var _user$project$Main$factsDecoder = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'data',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$list(_user$project$Main$factDecoder));
var _user$project$Main$Emitter = {ctor: 'Emitter'};
var _user$project$Main$Nfe = {ctor: 'Nfe'};
var _user$project$Main$makeSeries = function (facts) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Main$convert(facts),
		{
			ctor: '::',
			_0: _user$project$Main$Nfe,
			_1: {
				ctor: '::',
				_0: _user$project$Main$Emitter,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$displayChart = function (facts) {
	return _user$project$Chart$createChart(
		A2(
			_user$project$Chart$mkLineChart,
			'SeFaz',
			_user$project$Main$makeSeries(facts)));
};
var _user$project$Main$display = function (model) {
	var _p2 = model;
	switch (_p2.ctor) {
		case 'NotAsked':
			return _elm_lang$html$Html$text('Did not ask');
		case 'Loading':
			return _elm_lang$html$Html$text('Loading');
		case 'Failure':
			return _user$project$Main$displayError(_p2._0);
		default:
			return _user$project$Main$displayChart(_p2._0);
	}
};
var _user$project$Main$FetchFacts = {ctor: 'FetchFacts'};
var _user$project$Main$view_old = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Hello Program'),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$a,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$href('#'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$FetchFacts),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Click to update'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('chart'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$display(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$view_old,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$OnFetchFacts = function (a) {
	return {ctor: 'OnFetchFacts', _0: a};
};
var _user$project$Main$fetchFacts = A2(
	_elm_lang$core$Platform_Cmd$map,
	_user$project$Main$OnFetchFacts,
	_krisajenkins$remotedata$RemoteData$sendRequest(
		A2(_elm_lang$http$Http$get, 'http://172.21.0.12:4000/api/facts', _user$project$Main$factsDecoder)));
var _user$project$Main$init = {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$NotAsked, _1: _user$project$Main$fetchFacts};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p3 = msg;
		if (_p3.ctor === 'OnFetchFacts') {
			return {ctor: '_Tuple2', _0: _p3._0, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return {ctor: '_Tuple2', _0: _krisajenkins$remotedata$RemoteData$Loading, _1: _user$project$Main$fetchFacts};
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view})();
